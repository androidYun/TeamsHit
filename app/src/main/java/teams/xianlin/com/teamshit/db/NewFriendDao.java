package teams.xianlin.com.teamshit.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table NEW_FRIEND.
 */
public class NewFriendDao extends AbstractDao<NewFriend, Void> {

    public static final String TABLENAME = "NEW_FRIEND";

    /**
     * Properties of entity NewFriend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "UserId", true, "USER_ID");
        public final static Property PortraitUri = new Property(1, String.class, "PortraitUri", false, "PORTRAIT_URI");
        public final static Property DisplayName = new Property(2, String.class, "DisplayName", false, "DISPLAY_NAME");
    }

    ;


    public NewFriendDao(DaoConfig config) {
        super(config);
    }

    public NewFriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'NEW_FRIEND' (" + //
                "'USER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: UserId
                "'PORTRAIT_URI' TEXT," + // 1: PortraitUri
                "'DISPLAY_NAME' TEXT);"); // 2: DisplayName
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NEW_FRIEND'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewFriend entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUserId());

        String PortraitUri = entity.getPortraitUri();
        if (PortraitUri != null) {
            stmt.bindString(2, PortraitUri);
        }

        String DisplayName = entity.getDisplayName();
        if (DisplayName != null) {
            stmt.bindString(3, DisplayName);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public NewFriend readEntity(Cursor cursor, int offset) {
        NewFriend entity = new NewFriend( //
                cursor.getString(offset + 0), // UserId
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PortraitUri
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // DisplayName
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, NewFriend entity, int offset) {
        entity.setUserId(cursor.getString(offset + 0));
        entity.setPortraitUri(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDisplayName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(NewFriend entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(NewFriend entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
